diff --git a/CMakeLists.txt b/CMakeLists.txt
index fa483d6..0fc7f73 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,8 +1,14 @@
 cmake_minimum_required(VERSION 3.10)
 project(rdma-example)
-set(PUBLIC_LIB rdmacm ibverbs event pthread)
-add_subdirectory(src)
-add_subdirectory(app)
 
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules/")
+
+find_package(verbs)
+find_package(rdmacm)
+find_package(Threads)
 
+find_package(PkgConfig REQUIRED)
+pkg_check_modules(libevent REQUIRED IMPORTED_TARGET libevent)
 
+add_subdirectory(src)
+add_subdirectory(app)
diff --git a/app/CMakeLists.txt b/app/CMakeLists.txt
index 380bc46..5b99541 100644
--- a/app/CMakeLists.txt
+++ b/app/CMakeLists.txt
@@ -4,7 +4,7 @@ add_executable(server server.cc)
 add_executable(client client.cc)
 
 target_include_directories(server PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../../include)
-target_link_libraries(server PUBLIC rdma-lib ${PUBLIC_LIB})
+target_link_libraries(server PUBLIC rdma-lib)
 
 target_include_directories(client PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../../include)
-target_link_libraries(client PUBLIC rdma-lib ${PUBLIC_LIB})
\ No newline at end of file
+target_link_libraries(client PUBLIC rdma-lib)
\ No newline at end of file
diff --git a/cmake/modules/Findrdmacm.cmake b/cmake/modules/Findrdmacm.cmake
new file mode 100644
index 0000000..0016180
--- /dev/null
+++ b/cmake/modules/Findrdmacm.cmake
@@ -0,0 +1,26 @@
+# - Find rdma cm
+# Find the rdma cm library and includes
+#
+# RDMACM_INCLUDE_DIR - where to find cma.h, etc.
+# RDMACM_LIBRARIES - List of libraries when using rdmacm.
+# RDMACM_FOUND - True if rdmacm found.
+
+find_path(RDMACM_INCLUDE_DIR rdma/rdma_cma.h)
+find_library(RDMACM_LIBRARIES rdmacm)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(rdmacm DEFAULT_MSG RDMACM_LIBRARIES RDMACM_INCLUDE_DIR)
+
+if(RDMACM_FOUND)
+  if(NOT TARGET RDMA::RDMAcm)
+    add_library(RDMA::RDMAcm UNKNOWN IMPORTED)
+  endif()
+  set_target_properties(RDMA::RDMAcm PROPERTIES
+    INTERFACE_INCLUDE_DIRECTORIES "${RDMACM_INCLUDE_DIR}"
+    IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+    IMPORTED_LOCATION "${RDMACM_LIBRARIES}")
+endif()
+
+mark_as_advanced(
+  RDMACM_LIBRARIES
+)
diff --git a/cmake/modules/Findverbs.cmake b/cmake/modules/Findverbs.cmake
new file mode 100644
index 0000000..e266a4e
--- /dev/null
+++ b/cmake/modules/Findverbs.cmake
@@ -0,0 +1,36 @@
+# - Find rdma verbs
+# Find the rdma verbs library and includes
+#
+# VERBS_INCLUDE_DIR - where to find ibverbs.h, etc.
+# VERBS_LIBRARIES - List of libraries when using ibverbs.
+# VERBS_FOUND - True if ibverbs found.
+# HAVE_IBV_EXP - True if experimental verbs is enabled.
+
+find_path(VERBS_INCLUDE_DIR infiniband/verbs.h)
+find_library(VERBS_LIBRARIES ibverbs)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(verbs DEFAULT_MSG VERBS_LIBRARIES VERBS_INCLUDE_DIR)
+
+if(VERBS_FOUND)
+  include(CheckCXXSourceCompiles)
+  CHECK_CXX_SOURCE_COMPILES("
+    #include <infiniband/verbs.h>
+    int main() {
+      struct ibv_context* ctxt;
+      struct ibv_exp_gid_attr gid_attr;
+      ibv_exp_query_gid_attr(ctxt, 1, 0, &gid_attr);
+      return 0;
+    } " HAVE_IBV_EXP)
+  if(NOT TARGET IBVerbs::verbs)
+    add_library(IBVerbs::verbs UNKNOWN IMPORTED)
+  endif()
+  set_target_properties(IBVerbs::verbs PROPERTIES
+    INTERFACE_INCLUDE_DIRECTORIES "${VERBS_INCLUDE_DIR}"
+    IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+    IMPORTED_LOCATION "${VERBS_LIBRARIES}")
+endif()
+
+mark_as_advanced(
+  VERBS_LIBRARIES
+)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 1a6633e..c50c6c6 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -2,4 +2,4 @@ project(rdma-lib)
 file(GLOB_RECURSE SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cc)
 add_library(${PROJECT_NAME} ${SOURCE_FILES})
 target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../include)
-link_libraries(${PROJECT_NAME} PUBLIC ${PUBLIC_LIB})
+target_link_libraries(${PROJECT_NAME} PUBLIC IBVerbs::verbs RDMA::RDMAcm pthread PkgConfig::libevent)
